/* 
 * My API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Playground.Api.Client.Client.OpenAPIDateConverter;

namespace Playground.Api.Client.Model
{
    /// <summary>
    /// ConfigurationView
    /// </summary>
    [DataContract]
    public partial class ConfigurationView :  IEquatable<ConfigurationView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfigurationView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationView" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="createdOn">createdOn (required).</param>
        /// <param name="retries">retries.</param>
        /// <param name="sleepInMills">sleepInMills.</param>
        /// <param name="healthCheckCount">healthCheckCount.</param>
        public ConfigurationView(Guid id = default(Guid), string name = default(string), DateTime createdOn = default(DateTime), int retries = default(int), int sleepInMills = default(int), int healthCheckCount = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ConfigurationView and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            this.Name = name;
            // to ensure "createdOn" is required (not null)
            if (createdOn == null)
            {
                throw new InvalidDataException("createdOn is a required property for ConfigurationView and cannot be null");
            }
            else
            {
                this.CreatedOn = createdOn;
            }

            this.Retries = retries;
            this.SleepInMills = sleepInMills;
            this.HealthCheckCount = healthCheckCount;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets Retries
        /// </summary>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int Retries { get; set; }

        /// <summary>
        /// Gets or Sets SleepInMills
        /// </summary>
        [DataMember(Name="sleepInMills", EmitDefaultValue=false)]
        public int SleepInMills { get; set; }

        /// <summary>
        /// Gets or Sets HealthCheckCount
        /// </summary>
        [DataMember(Name="healthCheckCount", EmitDefaultValue=false)]
        public int HealthCheckCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationView {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  SleepInMills: ").Append(SleepInMills).Append("\n");
            sb.Append("  HealthCheckCount: ").Append(HealthCheckCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationView);
        }

        /// <summary>
        /// Returns true if ConfigurationView instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.Retries == input.Retries ||
                    this.Retries.Equals(input.Retries)
                ) && 
                (
                    this.SleepInMills == input.SleepInMills ||
                    this.SleepInMills.Equals(input.SleepInMills)
                ) && 
                (
                    this.HealthCheckCount == input.HealthCheckCount ||
                    this.HealthCheckCount.Equals(input.HealthCheckCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                hashCode = hashCode * 59 + this.Retries.GetHashCode();
                hashCode = hashCode * 59 + this.SleepInMills.GetHashCode();
                hashCode = hashCode * 59 + this.HealthCheckCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 256.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Retries (int) maximum
            if(this.Retries > (int)30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value less than or equal to 30.", new [] { "Retries" });
            }

            // Retries (int) minimum
            if(this.Retries < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value greater than or equal to 0.", new [] { "Retries" });
            }

            // SleepInMills (int) maximum
            if(this.SleepInMills > (int)60000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SleepInMills, must be a value less than or equal to 60000.", new [] { "SleepInMills" });
            }

            // SleepInMills (int) minimum
            if(this.SleepInMills < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SleepInMills, must be a value greater than or equal to 0.", new [] { "SleepInMills" });
            }

            // HealthCheckCount (int) maximum
            if(this.HealthCheckCount > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HealthCheckCount, must be a value less than or equal to 12.", new [] { "HealthCheckCount" });
            }

            // HealthCheckCount (int) minimum
            if(this.HealthCheckCount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HealthCheckCount, must be a value greater than or equal to 0.", new [] { "HealthCheckCount" });
            }

            yield break;
        }
    }

}
