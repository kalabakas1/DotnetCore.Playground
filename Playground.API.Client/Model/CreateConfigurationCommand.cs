/* 
 * My API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Playground.Api.Client.Client.OpenAPIDateConverter;

namespace Playground.Api.Client.Model
{
    /// <summary>
    /// CreateConfigurationCommand
    /// </summary>
    [DataContract]
    public partial class CreateConfigurationCommand :  IEquatable<CreateConfigurationCommand>, IValidatableObject
    {
        /// <summary>
        /// Defines SubscriptionTypeName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubscriptionTypeNameEnum
        {
            /// <summary>
            /// Enum LimitedHealthCheck for value: LimitedHealthCheck
            /// </summary>
            [EnumMember(Value = "LimitedHealthCheck")]
            LimitedHealthCheck = 1,

            /// <summary>
            /// Enum TwoOfEach for value: TwoOfEach
            /// </summary>
            [EnumMember(Value = "TwoOfEach")]
            TwoOfEach = 2

        }

        /// <summary>
        /// Gets or Sets SubscriptionTypeName
        /// </summary>
        [DataMember(Name="subscriptionTypeName", EmitDefaultValue=true)]
        public SubscriptionTypeNameEnum SubscriptionTypeName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConfigurationCommand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateConfigurationCommand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateConfigurationCommand" /> class.
        /// </summary>
        /// <param name="retries">retries.</param>
        /// <param name="sleepInMillsBetweenRetry">sleepInMillsBetweenRetry.</param>
        /// <param name="healthChecks">healthChecks.</param>
        /// <param name="subscriptionTypeName">subscriptionTypeName (required).</param>
        public CreateConfigurationCommand(int retries = default(int), int sleepInMillsBetweenRetry = default(int), List<HealthCheckDto> healthChecks = default(List<HealthCheckDto>), SubscriptionTypeNameEnum subscriptionTypeName = default(SubscriptionTypeNameEnum))
        {
            this.HealthChecks = healthChecks;
            this.SubscriptionTypeName = subscriptionTypeName;
            this.Retries = retries;
            this.SleepInMillsBetweenRetry = sleepInMillsBetweenRetry;
            this.HealthChecks = healthChecks;
        }
        
        /// <summary>
        /// Gets or Sets Retries
        /// </summary>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int Retries { get; set; }

        /// <summary>
        /// Gets or Sets SleepInMillsBetweenRetry
        /// </summary>
        [DataMember(Name="sleepInMillsBetweenRetry", EmitDefaultValue=false)]
        public int SleepInMillsBetweenRetry { get; set; }

        /// <summary>
        /// Gets or Sets HealthChecks
        /// </summary>
        [DataMember(Name="healthChecks", EmitDefaultValue=true)]
        public List<HealthCheckDto> HealthChecks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateConfigurationCommand {\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  SleepInMillsBetweenRetry: ").Append(SleepInMillsBetweenRetry).Append("\n");
            sb.Append("  HealthChecks: ").Append(HealthChecks).Append("\n");
            sb.Append("  SubscriptionTypeName: ").Append(SubscriptionTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateConfigurationCommand);
        }

        /// <summary>
        /// Returns true if CreateConfigurationCommand instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateConfigurationCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateConfigurationCommand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Retries == input.Retries ||
                    this.Retries.Equals(input.Retries)
                ) && 
                (
                    this.SleepInMillsBetweenRetry == input.SleepInMillsBetweenRetry ||
                    this.SleepInMillsBetweenRetry.Equals(input.SleepInMillsBetweenRetry)
                ) && 
                (
                    this.HealthChecks == input.HealthChecks ||
                    this.HealthChecks != null &&
                    input.HealthChecks != null &&
                    this.HealthChecks.SequenceEqual(input.HealthChecks)
                ) && 
                (
                    this.SubscriptionTypeName == input.SubscriptionTypeName ||
                    this.SubscriptionTypeName.Equals(input.SubscriptionTypeName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Retries.GetHashCode();
                hashCode = hashCode * 59 + this.SleepInMillsBetweenRetry.GetHashCode();
                if (this.HealthChecks != null)
                    hashCode = hashCode * 59 + this.HealthChecks.GetHashCode();
                hashCode = hashCode * 59 + this.SubscriptionTypeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Retries (int) minimum
            if(this.Retries < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value greater than or equal to 0.", new [] { "Retries" });
            }

            // SleepInMillsBetweenRetry (int) minimum
            if(this.SleepInMillsBetweenRetry < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SleepInMillsBetweenRetry, must be a value greater than or equal to 0.", new [] { "SleepInMillsBetweenRetry" });
            }

            yield break;
        }
    }

}
