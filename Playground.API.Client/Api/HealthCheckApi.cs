/* 
 * My API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Playground.Api.Client.Client;
using Playground.Api.Client.Model;

namespace Playground.Api.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHealthCheckApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the health checks associated with a configuration id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;HealthCheckViewModel&gt;</returns>
        List<HealthCheckViewModel> ApiConfigurationIdChecksGet (Guid id);

        /// <summary>
        /// Get the health checks associated with a configuration id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;HealthCheckViewModel&gt;</returns>
        ApiResponse<List<HealthCheckViewModel>> ApiConfigurationIdChecksGetWithHttpInfo (Guid id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHealthCheckApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the health checks associated with a configuration id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;HealthCheckViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<HealthCheckViewModel>> ApiConfigurationIdChecksGetAsync (Guid id);

        /// <summary>
        /// Get the health checks associated with a configuration id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;HealthCheckViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HealthCheckViewModel>>> ApiConfigurationIdChecksGetAsyncWithHttpInfo (Guid id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHealthCheckApi : IHealthCheckApiSync, IHealthCheckApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HealthCheckApi : IHealthCheckApi
    {
        private Playground.Api.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HealthCheckApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HealthCheckApi(String basePath)
        {
            this.Configuration = Playground.Api.Client.Client.Configuration.MergeConfigurations(
                Playground.Api.Client.Client.GlobalConfiguration.Instance,
                new Playground.Api.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Playground.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Playground.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Playground.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HealthCheckApi(Playground.Api.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Playground.Api.Client.Client.Configuration.MergeConfigurations(
                Playground.Api.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Playground.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Playground.Api.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Playground.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HealthCheckApi(Playground.Api.Client.Client.ISynchronousClient client,Playground.Api.Client.Client.IAsynchronousClient asyncClient, Playground.Api.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Playground.Api.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Playground.Api.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Playground.Api.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Playground.Api.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Playground.Api.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the health checks associated with a configuration id 
        /// </summary>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;HealthCheckViewModel&gt;</returns>
        public List<HealthCheckViewModel> ApiConfigurationIdChecksGet (Guid id)
        {
             Playground.Api.Client.Client.ApiResponse<List<HealthCheckViewModel>> localVarResponse = ApiConfigurationIdChecksGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the health checks associated with a configuration id 
        /// </summary>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;HealthCheckViewModel&gt;</returns>
        public Playground.Api.Client.Client.ApiResponse< List<HealthCheckViewModel> > ApiConfigurationIdChecksGetWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Playground.Api.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HealthCheckApi->ApiConfigurationIdChecksGet");

            Playground.Api.Client.Client.RequestOptions localVarRequestOptions = new Playground.Api.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Playground.Api.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Playground.Api.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", Playground.Api.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<HealthCheckViewModel> >("/api/Configuration/{id}/Checks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiConfigurationIdChecksGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the health checks associated with a configuration id 
        /// </summary>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;HealthCheckViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<HealthCheckViewModel>> ApiConfigurationIdChecksGetAsync (Guid id)
        {
             Playground.Api.Client.Client.ApiResponse<List<HealthCheckViewModel>> localVarResponse = await ApiConfigurationIdChecksGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the health checks associated with a configuration id 
        /// </summary>
        /// <exception cref="Playground.Api.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;HealthCheckViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Playground.Api.Client.Client.ApiResponse<List<HealthCheckViewModel>>> ApiConfigurationIdChecksGetAsyncWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Playground.Api.Client.Client.ApiException(400, "Missing required parameter 'id' when calling HealthCheckApi->ApiConfigurationIdChecksGet");


            Playground.Api.Client.Client.RequestOptions localVarRequestOptions = new Playground.Api.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", Playground.Api.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HealthCheckViewModel>>("/api/Configuration/{id}/Checks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiConfigurationIdChecksGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
