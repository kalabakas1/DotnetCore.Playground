@using Playground.BlazorServerApp.Data
@using Playground.BlazorServerApp.Data.ViewDtos
@using Playground.BlazorServerApp.Services

@inject ConfigurationService ConfigurationService
@inject ModalService ModalService


<div class="col-md-12">
    @if (configurations == null || !configurations.Any())
    {
        <p>
            <strong>No configurations in API...</strong>
        </p>
    }
    else
    {
        <div class="list-group">
            @foreach (var config in configurations)
            {
                var id = config.Id;
                <a class="list-group-item list-group-item-action flex-column align-items-start">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1" @onclick="@(() => OnConfigurationSelection.InvokeAsync(id))">@config.Name</h5>
                            <button class="btn btn-sm btn-primary float-right" @onclick="@(() => ModalService.Show<EditConfiguration>("Edit Configuration", new ModalParameters().Add(nameof(EditConfiguration.Id), id)))">Edit</button>
                            </div>
                            <small>@config.Id</small>
                            <small>@config.CreatedOn</small>
                                    </a>
            }
        </div>
    }
</div>


@code{

    [Parameter]
    public EventCallback<Guid> OnConfigurationSelection { get; set; }

    private ConfigurationDto[] configurations;

    protected override async Task OnInitializedAsync()
    {
        configurations = await ConfigurationService.GetConfigurationsAsync();
    }

}